.space {
  position: relative;
  height: 100vh;
  background-color: #000;
  overflow: hidden;
}

.stars {
  position: absolute;
  top: 0;
  left: 0;
  transform-origin: 0 0;
  width: 3840px; /* calc(1920px * 2); */
  height: 2640px; /* calc(1320px * 2); */

  @nest body[animation-space] & {
    animation: moving-stars 117s linear infinite;
    background-image: url(/assets/images/stars.webp);
  }
}

.spaceship {
  @nest body[animation-space='floating'] & {
    animation: float 6s ease-in-out infinite;
  }
}

.tv {
  position: relative;
  height: 100vh;
  background-color: #000;
  box-shadow: 0px 0px 50px 1px rgba(255, 255, 255, 0.2);
  overflow: hidden;
  margin: 0 auto;
  transform-origin: center 10%;

  @media (max-width: 900px) {
    transition: height 0.4s ease;
    will-change: height, transform;
  }

  @nest body[animation-space] & {
    --startTransform: scale(1) translateY(0);
    --endTransform: scale(var(--scale)) translateY(80px);
    --scale: 0.6;
    animation-duration: 0.4s;
    animation-timing-function: ease;
    animation-fill-mode: both;

    @media (max-width: 900px) {
      --scale: 0.9;
    }
  }

  @nest :matches(body[animation-space='entering'], body[animation-space='floating'])
      & {
    animation-name: go-to-space;

    @media (max-width: 900px) {
      height: calc(90vw / 16 * 10);
    }
  }

  @nest :matches(body[animation-space='exiting']) & {
    transform: var(--endTransform);
    animation-name: exit-space;
    animation-delay: 0.1s;
  }
}

.tv-screen {
  height: 100%;
}

.tv-effect--decontrast,
.tv-effect--colors,
.tv-effect--static,
.tv-effect--vignette {
  position: absolute;
  z-index: var(--layer-tv-effects);
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/* colors */
.tv-effect--colors {
  background-image: url(/assets/images/effect-colored-noise.gif);
  background-size: cover;
  opacity: 0.1;
}

/* static/noise effect */
.tv-effect--static {
  background-image: url(/assets/images/effect-glitch.gif);
  background-size: cover;
  opacity: 0.4;
}

/* vignette */
.tv-effect--vignette {
  background: radial-gradient(circle, transparent 60%, black 100%), transparent;

  @nest body:not([no-js])[animation-screen='turn-on'] & {
    background: radial-gradient(circle, black 30%, transparent 90%), transparent;
  }
}

/* remove some contrast from the webcam */
.tv-effect--decontrast {
  background-color: #fff;
  opacity: 0.2;

  @nest body:not(.using-camera) & {
    display: none;
  }
}

/* horizontal lines + scan line*/
.tv-effect--crt {
  &::before,
  &::after {
    content: '';
    display: block;
    position: absolute;
    z-index: var(--layer-tv-effects);
    top: 0;
    left: 0;
    width: 100%;
    pointer-events: none;
  }

  &::before {
    height: 90px;
    background: linear-gradient(
      180deg,
      transparent 0,
      #fffafa26 50%,
      transparent
    );
    animation: vline 8s linear infinite;
  }

  &::after {
    height: 100%;
    background-image: repeating-linear-gradient(
      transparent,
      transparent 6px,
      rgba(255, 255, 255, 0.03) 6px,
      rgba(255, 255, 255, 0.03) 12px
    );
  }
}

.tv-content {
  position: relative;
  z-index: var(--layer-content);
  height: 100%;
  overflow: hidden auto;
  background-color: rgba(0, 0, 0, 0.4);

  @nest body:not([no-js])[animation-screen='turn-on'] & {
    overflow: hidden;
  }
}

.tv-rec {
  display: inline-flex;
  align-items: center;

  & span {
    content: '';
    display: inline-block;
    width: 0.5rem;
    height: 0.5rem;
    margin-left: 0.5rem;
    background-color: #f00;
    box-shadow: 3px 0 0 var(--glitchy-blue), -3px 0 0 var(--glitchy-red);
    animation: blink 1.4s step-end infinite;
  }

  @nest body:not(.using-camera) & {
    display: none;
  }
}

body[animation-screen='turn-on'] .tv-screen {
  animation: turn-on-transform 0.4s, turn-on-filter 1s;
}

body[animation-screen='loading-channel'] {
  & .tv-screen {
    filter: brightness(10) saturate(0.2);
  }

  & .tv-effect--colors {
    opacity: 0.4;
  }

  & .tv-effect--static {
    opacity: 0.8;
  }
}
